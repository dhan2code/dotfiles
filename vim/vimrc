syntax on
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1
set number
set rnu
set incsearch
set wildmenu
set hlsearch
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set autoindent " automatically set indent of new line
set smartindent
set splitbelow
set splitright
set laststatus=2 " show the satus line all the time
" Display extra whitespace and tabs as characters, but not by default
set list
set listchars=tab:\ \ ,trail:·,nbsp:·
"set nowrap       "Don't wrap lines
"set linebreak    "Wrap lines at convenient points
"set undofile
" Set maximum number of changes that can be undone
"set undolevels=100
" Change directory to save undo history
"if has('persistent_undo')
"  set undodir=~/.vim/cache
"  if isdirectory(&undodir)==0
"    " Create directory
"    call system('mkdir ' . &undodir)
"  endif
"endif

call plug#begin('~/.vim/plugged')
	Plug 'sirver/ultisnips'| Plug 'honza/vim-snippets'
	Plug 'tpope/vim-surround'
call plug#end()

set conceallevel=1
let g:tex_conceal='abdmg'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<C-tab>'

augroup remember_fold
  autocmd!
  autocmd BufWinLeave * mkview
  autocmd BufWinEnter * silent! loadview
augroup END

"executes the command on quit for texfiles.
augroup autocom
    autocmd!
     autocmd VimLeave *.tex !~/scripts/texclear.sh %
augroup END

autocmd FileType tex map <Leader>c :w<CR>:!pdflatex % <CR><CR>
autocmd FileType tex map <Leader>o :!zathura %:r.pdf & <CR><CR>
autocmd FileType tex map <Leader>C :w<CR>:!pdflatex % && bibtex %:r.aux&& pdflatex % <CR><CR>
autocmd FileType markdown map <Leader>o :!zathura %:r.pdf & <CR><CR>
autocmd FileType markdown map <Leader>g :!git add % && git commit -m edit && git push <CR><CR>
autocmd FileType markdown map <Leader>c :w<CR>:!~/scripts/pandoc.sh % md1 <CR><CR>
autocmd FileType markdown map <Leader>b :!~/scripts/pandoc.sh % beamer <CR><CR>
autocmd FileType gap map <Leader>c :w<CR>:!gnome-terminal -e "gap -b %"<CR><CR>
autocmd FileType gap map <Leader>C :w<CR>:!~/scripts/makegap.sh % <CR>
autocmd FileType python map <Leader>c :w<CR>:!python % <CR>
autocmd FileType sh map <Leader>c :w<CR>:!./% <CR>
map <Leader>s :setlocal spell! spelllang=en_us <CR><CR>
nnoremap <silent><leader>w :w<CR>
nnoremap <silent><leader>q :q<CR>

map <Leader>n :setlocal nonumber! <CR><CR>
map <Leader>f :read !figlet -f 3d
map <Leader>r :%s/\s\+$//e <CR><CR>
map <Leader>d :filetype detect <CR><CR>
"map <Leader>r :/\s\+$ <CR><CR>
map <tab><Space> <Esc> /<++><Enter>"_c4l
nnoremap <Space> @q

"Calculators
inoremap <C-A> <Esc>diWi<space><C-r>=<C-r>"<CR>
map gbc yypkA =<Esc>jOscale=2<Esc>:.,+1!bc<CR>kJ
"Universal copy and paste
vnoremap <C-c> "+y
map <C-p> "+P

"Commands
command Rmslides g/begin{frame}/d | g/end{frame}/d

"map <Leader>r :setlocal rnu! <CR><CR>
"vnoremap <tab><space> <Esc> /<++><Enter>"_c4l
"inoremap <tab><space> <Esc> /<++><Enter>"_c4l
"highlight ExtraWhitespace ctermbg=yellow guibg=yellow
"match ExtraWhitespace /\s\+$/

"helpers for dealing with other people's code
nmap \t :set ts=4 sts=4 sw=4 noet<cr>
"nmap \s :set ts=4 sts=4 sw=4 et<cr>
